directive @partialProtected on FIELD_DEFINITION

directive @protected on FIELD_DEFINITION

type ActivateAccount {
  accessToken: JWT!
  refreshToken: JWT!
  user: PublicUser!
}

input ActivateAccountInput {
  activationCode: String!
  email: EmailAddress!
}

type ActiveAccount {
  accessToken: JWT!
  refreshToken: JWT!
  user: PublicUser!
}

type CreateTask {
  task: Task!
}

input CreateTaskInput {
  commentary: String
  date: DateString!
  duration: Float!
  status: TaskStatus!
  taskId: String
  type: TaskType!
}

scalar DateString

type DeleteTask {
  status: Boolean
}

input DeleteTaskParam {
  id: UUID!
}

type DetailedInvoice {
  date: GetAllInvoicesDate!
  tasks: Int!
  totalUsd: Float!
}

scalar EmailAddress

type FindAllTasks {
  count: Int!
  displaying: Int!
  documents: [Task!]!
  page: String!
}

input FindAllTasksQuery {
  limit: String
  page: String
  sort: String
}

type FindOneTask {
  task: Task!
}

input FindOneTaskParam {
  id: UUID!
}

type ForgotPassword {
  user: PublicUser!
}

input ForgotPasswordInput {
  email: EmailAddress!
}

type FullUser {
  logs: UserLogs!
  personal: UserPersonal!
  settings: UserSettings!
  temporary: UserTemporary!
  tokenVersion: Int!
}

type GetAllInvoices {
  count: Int!
  displaying: Int!
  documents: [DetailedInvoice!]!
  page: String!
}

type GetAllInvoicesDate {
  month: Int!
  year: Int!
}

input GetAllInvoicesQuery {
  limit: String
  page: String
  sort: String
  type: GetAllInvoicesType!
}

enum GetAllInvoicesType {
  QA
  TX
  both
}

type GetInvoiceByMonth {
  count: Int!
  displaying: Int!
  documents: [Task!]!
  page: String!
}

input GetInvoiceByMonthQuery {
  limit: String
  month: String!
  page: String
  sort: String
  taskId: String
  type: GetInvoiceByMonthType!
  year: String!
}

enum GetInvoiceByMonthType {
  QA
  TX
  both
}

type InactiveAccount {
  accessToken: JWT!
  message: String!
}

scalar JWT

union Login = ActiveAccount | InactiveAccount

input LoginInput {
  email: EmailAddress!
  password: String!
}

type Logout {
  message: String!
}

type Mutation {
  activateAccount(input: ActivateAccountInput!): ActivateAccount
  createTask(input: CreateTaskInput!): CreateTask!
  deleteTask(param: FindOneTaskParam!): DeleteTask!
  empty: String
  forgotPassword(input: ForgotPasswordInput!): ForgotPassword!
  login(input: LoginInput!): Login
  logout: Logout!
  resetPassword(input: ResetPasswordInput!): ResetPassword!
  sendEmailCode(input: SendEmailCodeInput!): SendEmailCode!
  sendForgotPasswordEmail(input: SendForgotPasswordEmailInput!): SendForgotPasswordEmail!
  sendWelcomeEmail(input: SendWelcomeEmailInput!): SendWelcomeEmail!
  signUp(input: SignUpInput!): SignUp!
  updateEmailByCode(input: UpdateEmailByCodeInput!): UpdateEmailByCode!
  updatePassword(input: UpdatePasswordInput!): UpdatePassword!
  updateTask(input: UpdateTaskInput!, param: UpdateTaskParam!): UpdateTask!
  updateUser(input: UpdateUserInput!): UpdateUser!
}

type PublicUser {
  personal: PublicUserPersonal!
  settings: PublicUserSettings!
}

type PublicUserPersonal {
  email: EmailAddress!
  id: UUID!
  name: String!
}

type PublicUserSettings {
  currency: UserCurrency!
}

type Query {
  empty: String
  findAllTasks(query: FindAllTasksQuery!): FindAllTasks!
  findOneTask(param: FindOneTaskParam!): FindOneTask!
  getAllInvoices(query: GetAllInvoicesQuery!): GetAllInvoices!
  getInvoiceByMonth(query: GetInvoiceByMonthQuery!): GetInvoiceByMonth!
  verifyResetPasswordToken(param: VerifyResetPasswordTokenInput!): VerifyResetPasswordToken!
}

type ResetPassword {
  refreshToken: JWT!
  user: PublicUser!
}

input ResetPasswordInput {
  password: String!
  passwordConfirmation: String!
}

type SendEmailCode {
  message: String!
}

input SendEmailCodeInput {
  email: EmailAddress!
}

type SendForgotPasswordEmail {
  message: String!
}

input SendForgotPasswordEmailInput {
  email: EmailAddress!
}

type SendWelcomeEmail {
  message: String!
}

input SendWelcomeEmailInput {
  email: EmailAddress!
}

type SignUp {
  user: PublicUser!
}

input SignUpInput {
  email: EmailAddress!
  name: String!
  password: String!
  passwordConfirmation: String!
}

type Task {
  commentary: String!
  date: TaskDate!
  duration: Float!
  id: UUID!
  logs: TaskLogs!
  status: TaskStatus!
  taskId: String!
  type: String!
  usd: Float!
  user: PublicUser!
}

type TaskDate {
  day: Int!
  full: DateString!
  hours: String!
  month: Int!
  year: Int!
}

type TaskLogs {
  createdAt: DateString!
  updatedAt: DateString
}

enum TaskStatus {
  completed
  in_progress
}

enum TaskType {
  QA
  TX
}

scalar UUID

type UpdateEmailByCode {
  user: PublicUser!
}

input UpdateEmailByCodeInput {
  emailCode: String!
}

type UpdatePassword {
  user: PublicUser!
}

input UpdatePasswordInput {
  currentPassword: String!
  password: String!
  passwordConfirmation: String!
}

union UpdateTask = UpdateTaskHasChanges | UpdateTaskNoChanges

type UpdateTaskHasChanges {
  task: Task!
}

input UpdateTaskInput {
  commentary: String
  date: DateString
  duration: Float
  status: TaskStatus
  taskId: String
  type: TaskType
}

type UpdateTaskNoChanges {
  message: String!
}

input UpdateTaskParam {
  id: UUID!
}

union UpdateUser = UpdateUserHasChanges | UpdateUserNoChanges

type UpdateUserHasChanges {
  user: PublicUser!
}

input UpdateUserInput {
  currency: UserCurrency
  email: EmailAddress
  name: String
}

type UpdateUserNoChanges {
  message: String!
}

enum UserCurrency {
  BRL
  USD
}

type UserLogs {
  createdAt: DateString!
  lastLoginAt: DateString
  lastSeenAt: DateString
  updatedAt: DateString
}

type UserPersonal {
  email: EmailAddress!
  id: UUID!
  name: String!
  password: String!
}

type UserSettings {
  accountActivated: Boolean!
  currency: UserCurrency!
  handicap: Int!
}

type UserTemporary {
  activationCode: String
  activationCodeExpiration: DateString
  resetPasswordToken: String
  tempEmail: String
  tempEmailCode: String
  tempEmailCodeExpiration: DateString
}

type VerifyResetPasswordToken {
  accessToken: JWT!
}

input VerifyResetPasswordTokenInput {
  token: JWT!
}
